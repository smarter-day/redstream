// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./mocks/redstream_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redstream "github.com/smarter-day/redstream"
	gomock "go.uber.org/mock/gomock"
)

// MockIRedStream is a mock of IRedStream interface.
type MockIRedStream struct {
	ctrl     *gomock.Controller
	recorder *MockIRedStreamMockRecorder
	isgomock struct{}
}

// MockIRedStreamMockRecorder is the mock recorder for MockIRedStream.
type MockIRedStreamMockRecorder struct {
	mock *MockIRedStream
}

// NewMockIRedStream creates a new mock instance.
func NewMockIRedStream(ctrl *gomock.Controller) *MockIRedStream {
	mock := &MockIRedStream{ctrl: ctrl}
	mock.recorder = &MockIRedStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedStream) EXPECT() *MockIRedStreamMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockIRedStream) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockIRedStreamMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockIRedStream)(nil).HealthCheck), ctx)
}

// Publish mocks base method.
func (m *MockIRedStream) Publish(ctx context.Context, data any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockIRedStreamMockRecorder) Publish(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRedStream)(nil).Publish), ctx, data)
}

// RegisterHandler mocks base method.
func (m *MockIRedStream) RegisterHandler(handler func(context.Context, map[string]string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", handler)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockIRedStreamMockRecorder) RegisterHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockIRedStream)(nil).RegisterHandler), handler)
}

// StartConsumer mocks base method.
func (m *MockIRedStream) StartConsumer(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsumer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsumer indicates an expected call of StartConsumer.
func (mr *MockIRedStreamMockRecorder) StartConsumer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockIRedStream)(nil).StartConsumer), ctx)
}

// UseDebug mocks base method.
func (m *MockIRedStream) UseDebug(fn redstream.LogFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseDebug", fn)
}

// UseDebug indicates an expected call of UseDebug.
func (mr *MockIRedStreamMockRecorder) UseDebug(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDebug", reflect.TypeOf((*MockIRedStream)(nil).UseDebug), fn)
}

// UseError mocks base method.
func (m *MockIRedStream) UseError(fn redstream.LogFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseError", fn)
}

// UseError indicates an expected call of UseError.
func (mr *MockIRedStreamMockRecorder) UseError(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseError", reflect.TypeOf((*MockIRedStream)(nil).UseError), fn)
}

// UseInfo mocks base method.
func (m *MockIRedStream) UseInfo(fn redstream.LogFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseInfo", fn)
}

// UseInfo indicates an expected call of UseInfo.
func (mr *MockIRedStreamMockRecorder) UseInfo(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseInfo", reflect.TypeOf((*MockIRedStream)(nil).UseInfo), fn)
}
